//给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。 
//
// 请你将两个数相加，并以相同形式返回一个表示和的链表。 
//
// 你可以假设除了数字 0 之外，这两个数都不会以 0 开头。 
//
// 
//
// 示例 1： 
//
// 
//输入：l1 = [2,4,3], l2 = [5,6,4]
//输出：[7,0,8]
//解释：342 + 465 = 807.
// 
//
// 示例 2： 
//
// 
//输入：l1 = [0], l2 = [0]
//输出：[0]
// 
//
// 示例 3： 
//
// 
//输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
//输出：[8,9,9,9,0,0,0,1]
// 
//
// 
//
// 提示： 
//
// 
// 每个链表中的节点数在范围 [1, 100] 内 
// 0 <= Node.val <= 9 
// 题目数据保证列表表示的数字不含前导零 
// 
// Related Topics 递归 链表 数学 👍 7681 👎 0


package leetcode.editor.cn;

import com.quickcode.debug.Recursion;
import com.quickcode.entity.ListNode;
import com.quickcode.predicate.Assert;

/**
 * 两数相加
 *
 * @author wangsibo
 * @date 2022-03-14 21:24:51
 */
public class AddTwoNumbers {

    private static Solution getSolution() {
        return new AddTwoNumbers().new Solution();
    }

    private static Recursion getRecursion() {
        return Recursion.getInstance();
    }

    public static void main(String[] args) {
        Solution solution = getSolution();
//        solution.addTwoNumbers(new ListNode(1), new ListNode(2));
//        System.out.println("dis");
//        Assert.checkEqual();
        String[] split = names.split("、");
        System.out.println(split.length + 1);
    }

    public static String names = "于飞、于帅帅、马丽婷、马学金、王一博、王小兵、王凡、王芪、王丽君、王佳彤、王朋、王荣梅、王涛、王海龙、王海军、王展鹏、王萍、王彪、王斯博、王雅琳、王新建、王嘉琦、王嫣然、王霞、王懿、韦引超、车博、文仲、方伟业、尹丹、邓宋臻、邓贤、邓雯君、邓锦豪、甘明杰、甘炜萍、石叶萍、石贵峰、卢苗、卢家鹏、叶梓欣、田志彬、史小雨、付立、白芸、白曦、邝婷、冯丽芳、冯昭鸣、冯俊光、冯梦琪、冯琦欣、边冬辉、巩轶凡、吕游、朱世玉、朱建廷、朱珂倩、朱晓玲、朱雪梅、朱棣、伍玉嫦、向伟、邬秀芬、庄美宸、庄惠强、刘小宾、刘川、刘丹、刘杰、刘雨燕、刘国平、刘俊坚、刘美群、刘洁娜、刘晓冬、刘倩妮、刘航、刘海涛、刘梓谦、刘银燕、刘敏灵、刘琪、刘皓、刘裕、刘鹏华、刘鹏奇、齐文涛、江志伟、江志煊、池癸生、汤慧君、汤露茹、安娜、许伟聪、许婷婷、孙青、孙裔学、纪立超、麦浩前、严运锋、苏小杏、苏美富、苏袖、杜致美、巫宝锋、李云禄、李文、李陈德、李妍、李杰增、李珍、李思瑩、李艳平、李晋、李晓红、李浩田、李陶、李彬、李惠芬、李景霞、李瑞杰、李静、李碧蓉、杨力、杨乐怡、杨观红、杨芸芸、杨岗、杨何伍、杨波、杨承恩、杨春燕、杨峻、杨高振、杨曼 、杨瑞妹、肖冬玲、肖鸣悦、肖静敏、吴才文、吴松、吴佳鹏、吴学超、吴珊虹、吴耿、吴晓雯、吴涛、吴嘉仪、吴燕霞、岑洪杰、邱坤凤、何少雯、何文斌、何春梅、何威俊、何结英、何铭宜、何睿、余俊起、余辉煌、谷剑英、闵汝、沈锋文、张小连、张中磊、张巧裕、张永强、张宇霆、张志伟、张奇、张欣怡、张弦、张洁滨、张晓润、张浩庭、张海平、张梦婷、张琦敏、张琨、张超楠、张雯炜、张辉、张静芳、张慧婷、陆奕豪、陈力、陈小蓉、陈子超、陈少静、陈少璇、陈文森、陈旭初、陈兴斌、陈军、陈财芳、陈秀娟、陈咏君、陈佳佳、陈金带、陈育林、陈炎宏、陈泽荣、陈春萍、陈荣荣、陈虹雁、陈亮、陈奕景、陈洪宇、陈结玲、陈晓峰、陈晓敏、陈笑璞、陈骏杰、陈常超、陈辉腾、陈然、陈童娜、陈瑞松、陈嘉旭、陈燕华、邵世国、邵瑞娟、苗帅、范少芬、范军好、范志鹏、范秀萍、林冬娜、林利利、林沛嵩、林英杰、林欣茹、林健乐、林雅茹、易琦、罗立科、罗春香、罗茵、周书、周书程、周易、周柳萍、周楚健、庞文彦、郑一菡、郑宇銮、郑妙旋、郑秋然、郑彬彬、郑敏聪、郑嘉旭、赵叶纯、赵海波、赵楷宾、荆正昆、胡成鑫、胡国超、胡炜笛、胡翔宇、柯嘉锐、钟上权、钟文豪、钟龙波、钟华振、钟志慧、钟启明、钟柳婷、钟夏琪、钟惠芳、段俏、俞钱春、俞海、姜腾博、洪亚娜、洪晓玲、胥书成、姚茵妮、姚鹏飞、姚福亮、敖玉君、袁炜基、袁建华、袁冠彬、莫英骏、莫泽广、莫家莹、莫彩玲、贾伦、柴崇、晏晓红、徐卫鸿、徐子聪、徐冠华、徐傲婕、殷旭、殷星雨、高威、高晶、高嫚、郭文添、郭俊、郭雪利、唐小梅、唐江浪、唐纪龙、唐丽丽、黄小莉、黄立全、黄光毅、黄旭民、黄兴、黄进沐、黄志、黄丽冰、黄启来、黄林煜、黄春霞、黄荣浩、黄思宏、黄俊、黄素蓉、黄桂梅、黄晓玲、黄健勇、黄涛、黄润丽、黄家静、黄焕彪、黄淑环、黄超、黄腾、黄靖雯、黄澄秀、萧家洲、曹巧玲、曹娟、龚豪、崔文浩、阎柳依、梁才林、梁汉超、梁汝健、梁宙华、梁崇祺、梁惠敏、梁雁翎、梁嘉芮、随文厦、彭巧宇、彭邦兴、彭依桐、彭琳岚、彭琼、彭强、葛明、董文文、董婉君、董新柱、韩中帅、程天赦、傅玉安、傅伯文、舒梦霞、童轶、童琥珀、曾友强、曾家梁、曾焰南、曾媛凤、曾雷鸣、曾鑫、温远杭、温梓呈、温静芳、谢玉桔、谢欣健、谢炜斌、谢珣、谢晶晶、蓝昊、蓝超觉、蒙宏势、楚伟佳、赖东林、雷琳琳、蔡伟彬、蔡杰、蔡保川、蔡钰华、蔡祺、廖伯祥、廖微、谭凤花、谭功全、谭响、谭雪姣、谭淑贤、黎晓雯、黎敏怡、黎淑欣、黎智杰、潘志邦、潘浩华、潘媚、燕悦、薛吟月、冀晓珊、戴伟铭、戴慧林、魏任行、魏青、魏鹏辉";

    //leetcode submit region begin(Prohibit modification and deletion)

    /**
     * Definition for singly-linked list.
     * public class ListNode {
     * int val;
     * ListNode next;
     * ListNode() {}
     * ListNode(int val) { this.val = val; }
     * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
     * }
     */
    class Solution {
        public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
            getRecursion().pushNoNewLine().print("i", 1);
            return null;
        }
    }
//leetcode submit region end(Prohibit modification and deletion)


}